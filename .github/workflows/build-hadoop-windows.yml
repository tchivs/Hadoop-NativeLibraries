name: Build Hadoop Windows Native Libraries

on:
  workflow_dispatch:
    inputs:
      hadoop_version:
        description: 'Hadoop version to build (e.g., 3.4.2, 3.4.2)'
        required: true
        default: '3.4.2'
        type: string
      architecture:
        description: 'Target architecture (x64, x86, or both)'
        required: true
        default: 'both'
        type: choice
        options:
          - both
          - x64
          - x86
  push:
    branches:
      - main
    paths:
      - '.github/workflows/build-hadoop-windows.yml'
      - 'scripts/**'

jobs:
  build-hadoop-native:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86]
        include:
          - arch: x64
            platform_name: win64
          - arch: x86
            platform_name: win32

    steps:
      - name: Check if build should run
        id: should_build
        shell: pwsh
        run: |
          $shouldBuild = $false

          # Always build on push events
          if ("${{ github.event_name }}" -eq "push") {
            $shouldBuild = $true
          }
          # For workflow_dispatch, check architecture input
          elseif ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $arch = "${{ github.event.inputs.architecture }}"
            $matrixArch = "${{ matrix.arch }}"

            if ($arch -eq "both" -or $arch -eq $matrixArch) {
              $shouldBuild = $true
            }
          }

          echo "should_build=$shouldBuild" >> $env:GITHUB_OUTPUT
          Write-Host "Should build ${{ matrix.arch }}: $shouldBuild"

      - name: Enable Git long paths
        if: steps.should_build.outputs.should_build == 'true'
        run: git config --system core.longpaths true

      - name: Checkout this repository (for scripts)
        if: steps.should_build.outputs.should_build == 'true'
        uses: actions/checkout@v4
        with:
          path: build-scripts

      - name: Checkout Apache Hadoop source
        if: steps.should_build.outputs.should_build == 'true'
        uses: actions/checkout@v4
        with:
          repository: apache/hadoop
          ref: rel/release-${{ github.event.inputs.hadoop_version || '3.4.2' }}
          path: hadoop-src

      - name: Setup Java 8
        if: steps.should_build.outputs.should_build == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '8'

      - name: Cache Maven packages
        if: steps.should_build.outputs.should_build == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ matrix.arch }}-${{ hashFiles('hadoop-src/**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ matrix.arch }}-
            ${{ runner.os }}-maven-

      - name: Set environment variables
        if: steps.should_build.outputs.should_build == 'true'
        shell: pwsh
        run: |
          echo "HADOOP_VERSION=${{ github.event.inputs.hadoop_version || '3.4.2' }}" >> $env:GITHUB_ENV
          echo "BUILD_ARCH=${{ matrix.arch }}" >> $env:GITHUB_ENV
          echo "PLATFORM_NAME=${{ matrix.platform_name }}" >> $env:GITHUB_ENV

          # Ensure Git Bash precedes system binaries so bash resolves correctly
          $gitPaths = @(
            'C:\Program Files\Git\usr\bin',
            'C:\Program Files\Git\bin'
          )
          $pathEntries = $gitPaths + ($env:PATH -split ';')
          $normalizedPath = ($pathEntries | Where-Object { $_ } | Select-Object -Unique) -join ';'
          echo "PATH=$normalizedPath" >> $env:GITHUB_ENV

      - name: Configure MSVC environment
        if: steps.should_build.outputs.should_build == 'true'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
          # vsversion: 2022

      - name: Patch winutils name conflict
        if: steps.should_build.outputs.should_build == 'true'
        shell: pwsh
        run: |
          Write-Host "========================================" -ForegroundColor Cyan
          Write-Host "Patching Windows SDK symbol conflicts" -ForegroundColor Cyan
          Write-Host "========================================" -ForegroundColor Cyan

          $base = "hadoop-src\hadoop-common-project\hadoop-common\src\main\winutils"

          # All files that need patching for GetFileInformationByName conflict
          $targets = @(
            "$base\include\winutils.h",
            "$base\libwinutils.c",
            "$base\chmod.c",
            "$base\hardlink.c",
            "$base\ls.c"
          )

          $patchCount = 0
          foreach ($file in $targets) {
            if (-not (Test-Path $file)) {
              Write-Warning "Expected file not found: $file"
              continue
            }

            $original = Get-Content -Raw -Path $file
            # Replace all instances of GetFileInformationByName with HadoopGetFileInformationByName
            $patched = $original -replace 'GetFileInformationByName', 'HadoopGetFileInformationByName'

            if ($original -ne $patched) {
              Set-Content -Path $file -Value $patched -NoNewline -Encoding UTF8
              Write-Host "✓ Patched $(Split-Path $file -Leaf) to avoid Windows SDK symbol conflict" -ForegroundColor Green
              $patchCount++
            } else {
              Write-Host "- No changes needed for $(Split-Path $file -Leaf)" -ForegroundColor Gray
            }
          }

          Write-Host "`n✓ Total C/C++ files patched: $patchCount" -ForegroundColor Green

          # Patch Visual Studio project files to use current toolset (v143)
          Write-Host "`nPatching Visual Studio project files for v143 toolset..." -ForegroundColor Cyan
          $vcxprojFiles = Get-ChildItem -Path $base -Filter *.vcxproj
          $toolsetPatchCount = 0
          foreach ($projFile in $vcxprojFiles) {
            $content = Get-Content -Raw -Path $projFile.FullName
            # Replace any v14x toolset with v143 (current VS 2022)
            $newContent = $content -replace '<PlatformToolset>v14[0-9]</PlatformToolset>', '<PlatformToolset>v143</PlatformToolset>'

            if ($content -ne $newContent) {
              Set-Content -Path $projFile.FullName -Value $newContent -NoNewline -Encoding UTF8
              Write-Host "✓ Updated $($projFile.Name) to use v143 toolset" -ForegroundColor Green
              $toolsetPatchCount++
            }
          }

          Write-Host "`n✓ Total project files patched: $toolsetPatchCount" -ForegroundColor Green

      - name: Build Hadoop native libraries (${{ matrix.arch }})
        if: steps.should_build.outputs.should_build == 'true'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Host "========================================" -ForegroundColor Cyan
          Write-Host "Building Hadoop $env:HADOOP_VERSION for ${env:BUILD_ARCH}" -ForegroundColor Cyan
          Write-Host "========================================" -ForegroundColor Cyan

          Push-Location "hadoop-src"

          # Set Platform for CMake
          if ($env:BUILD_ARCH -eq 'x86') {
            $env:Platform = 'Win32'
          } else {
            $env:Platform = 'x64'
          }

          Write-Host "`nMaven build starting..." -ForegroundColor Yellow
          Write-Host "Platform: $env:Platform"
          Write-Host "Architecture: $env:BUILD_ARCH`n"

          # Build hadoop-common (includes winutils.exe and hadoop.dll)
          # Note: Skipping hadoop-hdfs-native-client due to CMake toolchain issues
          mvn package `
            "-Pnative-win" `
            "-DskipTests" `
            "-Dmaven.javadoc.skip=true" `
            "-Drequire.fuse=false" `
            "-pl" ":hadoop-common,:hadoop-maven-plugins" `
            "-am"

          $mvnExit = $LASTEXITCODE
          Pop-Location

          if ($mvnExit -ne 0) {
            Write-Host "`n✗ Build failed with exit code $mvnExit" -ForegroundColor Red
            exit $mvnExit
          }

          Write-Host "`n✓ Build completed successfully for ${env:BUILD_ARCH}" -ForegroundColor Green

      - name: Collect artifacts (${{ matrix.arch }})
        if: steps.should_build.outputs.should_build == 'true'
        shell: pwsh
        run: |
          Write-Host "========================================" -ForegroundColor Cyan
          Write-Host "Collecting build artifacts" -ForegroundColor Cyan
          Write-Host "========================================" -ForegroundColor Cyan

          $version = "${{ github.event.inputs.hadoop_version || '3.4.2' }}"
          $arch = "${{ matrix.arch }}"
          $outputDir = "hadoop-$version-windows-$arch"

          New-Item -ItemType Directory -Force -Path $outputDir\bin | Out-Null
          New-Item -ItemType Directory -Force -Path $outputDir\lib | Out-Null

          # Source root is now hadoop-src instead of hadoop-$version-src
          $sourceRoot = "hadoop-src"

          # Only collect from hadoop-common (winutils.exe, hadoop.dll, etc.)
          $binSources = @(
            Join-Path $sourceRoot "hadoop-common-project\hadoop-common\target\bin"
          )

          $filesCopied = 0
          foreach ($binSource in $binSources) {
            if (Test-Path $binSource) {
              Write-Host "Collecting from: $binSource" -ForegroundColor Yellow

              Get-ChildItem -Path $binSource -Filter *.exe -File -ErrorAction SilentlyContinue | ForEach-Object {
                Copy-Item $_.FullName -Destination "$outputDir\bin\" -Force
                Write-Host "  ✓ $($_.Name)" -ForegroundColor Green
                $filesCopied++
              }
              Get-ChildItem -Path $binSource -Filter *.dll -File -ErrorAction SilentlyContinue | ForEach-Object {
                Copy-Item $_.FullName -Destination "$outputDir\bin\" -Force
                Write-Host "  ✓ $($_.Name)" -ForegroundColor Green
                $filesCopied++
              }
              Get-ChildItem -Path $binSource -File -ErrorAction SilentlyContinue | Where-Object { $_.Extension -in @('.cmd', '.bat') } | ForEach-Object {
                Copy-Item $_.FullName -Destination "$outputDir\bin\" -Force
                Write-Host "  ✓ $($_.Name)" -ForegroundColor Green
                $filesCopied++
              }
            }
          }

          # Only collect from hadoop-common native libraries
          $libSources = @(
            (Join-Path $sourceRoot "hadoop-common-project\hadoop-common\target\native\bin"),
            (Join-Path $sourceRoot "hadoop-common-project\hadoop-common\target\native")
          )

          foreach ($libSource in $libSources) {
            if (Test-Path $libSource) {
              Get-ChildItem -Path $libSource -Filter *.dll -File -ErrorAction SilentlyContinue | ForEach-Object {
                $destFile = "$outputDir\lib\$($_.Name)"
                if (-not (Test-Path $destFile)) {
                  Copy-Item $_.FullName -Destination "$outputDir\lib\" -Force
                  Write-Host "  ✓ $($_.Name) (lib)" -ForegroundColor Green
                  $filesCopied++
                }
              }
            }
          }

          Write-Host "`nTotal files collected: $filesCopied" -ForegroundColor Cyan

          # List what was built
          Write-Host "`nBuilt artifacts for $arch :" -ForegroundColor Cyan
          Get-ChildItem -Recurse $outputDir | Format-Table -AutoSize

          # Check file architecture using dumpbin (if available)
          $hadoopDll = "$outputDir\bin\hadoop.dll"
          if (Test-Path $hadoopDll) {
            $dumpbin = Get-ChildItem "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($dumpbin) {
              Write-Host "`nVerifying architecture of hadoop.dll:" -ForegroundColor Yellow
              & $dumpbin.FullName /headers $hadoopDll | Select-String "machine"
            }
          }

          # Create version info file
          $buildDate = Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC'
          $buildInfo = "Hadoop Version: $version`n"
          $buildInfo += "Build Date: $buildDate`n"
          $buildInfo += "Architecture: $arch`n"
          $buildInfo += "Platform: Windows $env:PLATFORM_NAME`n"
          $buildInfo += "Built with: Visual Studio 2022`n"
          $buildInfo += "Source: Apache Hadoop Git Repository`n"
          $buildInfo += "`n"
          $buildInfo += "IMPORTANT: This build is for $arch architecture only.`n"
          $buildInfo += "Make sure your Java JVM matches this architecture ($arch).`n"
          $buildInfo | Out-File "$outputDir\BUILD_INFO.txt"

          Write-Host "`n✓ Artifacts collected successfully" -ForegroundColor Green

      - name: Upload artifacts (${{ matrix.arch }})
        if: steps.should_build.outputs.should_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: hadoop-${{ github.event.inputs.hadoop_version || '3.4.2' }}-windows-${{ matrix.arch }}
          path: hadoop-${{ github.event.inputs.hadoop_version || '3.4.2' }}-windows-${{ matrix.arch }}/
          retention-days: 90

      - name: Create Release Archive (${{ matrix.arch }})
        if: steps.should_build.outputs.should_build == 'true' && github.event_name == 'workflow_dispatch'
        shell: pwsh
        run: |
          $version = "${{ github.event.inputs.hadoop_version || '3.4.2' }}"
          $arch = "${{ matrix.arch }}"
          $outputDir = "hadoop-$version-windows-$arch"
          $archiveName = "$outputDir.zip"

          Compress-Archive -Path "$outputDir\*" -DestinationPath $archiveName -Force
          Write-Host "✓ Created release archive: $archiveName" -ForegroundColor Green

      - name: Create Release (${{ matrix.arch }})
        if: steps.should_build.outputs.should_build == 'true' && github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: hadoop-${{ github.event.inputs.hadoop_version || '3.4.2' }}-windows-${{ matrix.arch }}
          name: Hadoop ${{ github.event.inputs.hadoop_version || '3.4.2' }} Windows Native Libraries (${{ matrix.arch }})
          body: |
            # Hadoop ${{ github.event.inputs.hadoop_version || '3.4.2' }} Windows Native Libraries (${{ matrix.arch }})

            This release contains the native Windows libraries for Hadoop ${{ github.event.inputs.hadoop_version || '3.4.2' }}.

            ## Architecture
            **${{ matrix.arch }}** (${{ matrix.platform_name }})

            ⚠️ **IMPORTANT**: Make sure your Java JVM architecture matches this build (${{ matrix.arch }}).

            ## Contents
            - `bin/`: Contains winutils.exe and DLL files
            - `lib/`: Contains native library files (hadoop.dll, hdfs.dll, etc.)

            ## Usage
            1. Extract the archive
            2. Set `HADOOP_HOME` to the extracted directory
            3. Add `%HADOOP_HOME%\bin` to your PATH
            4. Verify your Java is ${{ matrix.arch }}: `java -version` (should show "${{ matrix.arch }}" or "${{ matrix.platform_name }}")

            ## Build Information
            - Built with: Visual Studio 2022
            - Platform: Windows ${{ matrix.platform_name }}
            - Architecture: ${{ matrix.arch }}
            - Build Date: ${{ github.event.repository.updated_at }}

            ## Verification
            After installation, verify with:
            ```cmd
            hadoop checknative -a
            ```
          files: hadoop-${{ github.event.inputs.hadoop_version || '3.4.2' }}-windows-${{ matrix.arch }}.zip
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          token: ${{ secrets.GITHUB_TOKEN }}
